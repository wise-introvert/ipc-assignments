Answer 1
---------
For me, personally, the getCharOption was the most difficult function to deal with out of all the other functions in the helper library. Building the function from the specification provided in the documentation was not challenging and I was able to build it farily easily. However, integrating the function into the existing system created a few bugs that were not raised in the unit tests that I wrote for that function. When the value returned by the function was being assigned to a variable, the function was not working as expected: rejecting chars not part of the array and accepting valid inputs. After a lot of debugging and testing, I was able to isolate and remove the bug from the function. In the end, pointers were what proved to be the function's bane.

Answer 2
---------
The way helper function library is able to mitigate the complexities attached to software maintability while keeping the code readable is by breaking the program in to small, logically readable functions. This approach, regardless of the engineer's level of experience, makes it easier to decypher any function's purpose, motives and usecases. Secondly, consolidating all the globally-required functions into one file makes that file the single source of truth of those functions. This helps during scaling by eliminating the need to edit multiple files and dealing with redundant logic.

Answer 3
---------
Building large, scalable, applications means dealing with complex, nested and at time, interwoven data types and although the primitive data types are powerfull, they can only help mitigate this complexity to a certain extent. The C programming language provides the ability to create custom data types for this very reason. Being able to objectify a complex object into data type makes it easier to reuse it in other parts of the code and is an extremely powerfull tool.
